/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Person;
import hr.algebra.model.PersonAddable;
import hr.algebra.model.movie.Movie;
import hr.algebra.model.movie.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.algebra.utils.NumberUtils;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import java.awt.Frame;
import java.awt.Window;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author asim2
 */
public class EditMoviesPanel extends javax.swing.JPanel implements PersonAddable {

    private Repository repository;
    private MovieTableModel tableModel;
    private DefaultListModel<Person> actorsModel;

    private static final String PUBLISHED_DATE_NAME_PROPERTY = "Date";

    private static final String ERROR_MARK = "X";

    private static final String DIR = "assets";

    private static final String WRONG_OPERATION_MOVIE = "Please choose a movie.";
    private static final String WRONG_OPERATION_ACTOR = "Please select actor to delete from movie actors list.";
    private static final String WRONG_OPERATION = "Wrong operation";

    private static final String DELETE_CONFIRMATION_MESSAGE = "Are you sure you want to delete this movie?";
    private static final String DELETE_CONFIRMATION = "Delete confirmation";

    private static final String DEFAULT_PICTURE_PATH = "/assets/no_image.png";

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Set<Person> actorsToAddToDB;
    private Set<Person> actorsToRemoveFromDB;

    private Movie selectedMovie;
    private Person selectedActor;

    /**
     * Creates new form EditMoviesPanel
     */
    public EditMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        lbIcon = new javax.swing.JLabel();
        lbIconError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        lbActorsError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        lbOriginalTitleError = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        lbDescriptionError = new javax.swing.JLabel();
        btnActorAdd = new javax.swing.JButton();
        btnActorDelete = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tfDirector = new javax.swing.JTextField();
        lbDurationError = new javax.swing.JLabel();
        lbPublishedDateError = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbDirectorError = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1192, 855));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        lbIconError.setForeground(java.awt.Color.red);

        jLabel3.setText("Title:");

        lbTitleError.setForeground(java.awt.Color.red);

        jLabel5.setText("Original title:");

        lbActorsError.setForeground(java.awt.Color.red);

        jLabel7.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        lbOriginalTitleError.setForeground(java.awt.Color.red);

        tfPicturePath.setEnabled(false);

        btnChoose.setText("Choose image");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        jLabel9.setText("Actors:");

        jScrollPane3.setViewportView(lsActors);

        lbDescriptionError.setForeground(java.awt.Color.red);

        btnActorAdd.setText("Add");
        btnActorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorAddActionPerformed(evt);
            }
        });

        btnActorDelete.setBackground(java.awt.Color.red);
        btnActorDelete.setText("Delete");
        btnActorDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorDeleteActionPerformed(evt);
            }
        });

        jLabel11.setText("Published date:");

        jLabel12.setText("Director:");

        lbDurationError.setForeground(java.awt.Color.red);

        lbPublishedDateError.setForeground(java.awt.Color.red);

        jLabel15.setText("Genre:");

        lbGenreError.setForeground(java.awt.Color.red);

        jLabel17.setText("Duration:");

        lbDirectorError.setForeground(java.awt.Color.red);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(java.awt.Color.red);
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnActorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnActorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(76, 76, 76)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(tfPicturePath)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbIcon))
                                .addGap(18, 18, 18)
                                .addComponent(lbIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(266, 266, 266)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbIcon)
                    .addComponent(lbIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tfPicturePath)
                        .addComponent(btnChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnActorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        clearActorSets();
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        clearActorSets();
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void btnActorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorAddActionPerformed
        Window parent = SwingUtilities.windowForComponent(this);
        new AddActorDialog((Frame) parent, false, this).setVisible(true);
    }//GEN-LAST:event_btnActorAddActionPerformed

    private void btnActorDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorDeleteActionPerformed
        selectedActor = lsActors.getSelectedValue();
        if (selectedActor == null) {
            MessageUtils.showInformationMessage(WRONG_OPERATION, WRONG_OPERATION_ACTOR);
            return;
        }
        actorsToRemoveFromDB.add(selectedActor);
        actorsModel.removeElement(selectedActor);
        selectedActor = null;

    }//GEN-LAST:event_btnActorDeleteActionPerformed


    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lbIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER),
                        taDescription.getText().trim(),
                        tfOriginalTitle.getText().trim(),
                        getPerson(tfDirector.getText().trim()),
                        null,
                        tfDuration.getText().trim(),
                        tfGenre.getText().trim(),
                        tfPicturePath.getText()
                );
                movie.getDirector().setId(repository.createDirector(movie.getDirector()));
                movie.setId(repository.createMovie(movie));
                for (Person actor : actorsToAddToDB) {
                    actor.setId(repository.createActor(actor));
                    repository.createMovieActor(movie, actor);
                }

                tableModel.setMovies(repository.getMovies());
                clearForm();
                clearActorSets();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage(WRONG_OPERATION, WRONG_OPERATION_MOVIE);
            return;
        }

        if (formValid()) {
            try {
                if (!tfPicturePath.getText().trim().equals(selectedMovie.getPicturePath())) {
                    if (selectedMovie.getPicturePath() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                    }
                    String path = uploadPicture();
                    selectedMovie.setPicturePath(path);
                }
                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setGenre(tfGenre.getText().trim());
                selectedMovie.setDuration(tfDuration.getText().trim());

                Person director = getPerson(tfDirector.getText().trim());
                director.setId(repository.createDirector(director));
                selectedMovie.setDirector(director);

                for (Person actorRemove : actorsToRemoveFromDB) {
                    repository.deleteActorFromMovieActor(actorRemove.getId());
                }

                for (Person actorAdd : actorsToAddToDB) {
                    actorAdd.setId(repository.createActor(actorAdd));
                    repository.createMovieActor(selectedMovie, actorAdd);
                }

                repository.updateMovie(selectedMovie);

                tableModel.setMovies(repository.getMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage(WRONG_OPERATION, WRONG_OPERATION_MOVIE);
            return;
        }
        if (MessageUtils.showConfirmDialog(DELETE_CONFIRMATION, DELETE_CONFIRMATION_MESSAGE) == JOptionPane.YES_OPTION) {

            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                repository.deleteMovie(selectedMovie.getId());
                tableModel.setMovies(repository.getMovies());
                clearForm();
                clearActorSets();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorAdd;
    private javax.swing.JButton btnActorDelete;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirectorError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbIconError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initActorsSet();
            initRepository();
            initActorsListModel();
            initTable();

        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        tableModel = new MovieTableModel(repository.getMovies());
        tbMovies.setModel(tableModel);
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfOriginalTitle, taDescription, tfPublishedDate, tfDirector, tfGenre, tfDuration, tfPicturePath);
        errorLabels = Arrays.asList(lbTitleError, lbOriginalTitleError, lbDescriptionError, lbPublishedDateError, lbDirectorError, lbGenreError, lbDurationError, lbIconError);
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));

        } catch (IllegalArgumentException ex) {
            Logger.getLogger(EditMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(DEFAULT_PICTURE_PATH)));

        } catch (IOException ex) {
            Logger.getLogger(EditMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? ERROR_MARK : "");
            if (PUBLISHED_DATE_NAME_PROPERTY.equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    errorLabels.get(i).setText(ERROR_MARK);
                    ok = false;
                }
            }
        }

        if (lsActors.getModel().getSize() == 0) {
            lbActorsError.setText(ERROR_MARK);
            ok = false;
        } else {
            lbActorsError.setText("");
        }
        
        if (!NumberUtils.isPositiveInteger(tfDuration.getText().trim())) {
            lbDurationError.setText(ERROR_MARK);
            ok = false;
        }

        return ok;
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();
        int realRowIndex = tbMovies.convertRowIndexToModel(selectedRow);

        int id = (int) tableModel.getValueAt(realRowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.getMovie(id);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);

            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillForm(Movie movie) {
        tfTitle.setText(movie.getTitle());
        tfOriginalTitle.setText(movie.getOriginalTitle());
        taDescription.setText(movie.getDescription());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        tfDirector.setText(movie.getDirector().toString());
        tfGenre.setText(movie.getGenre());
        tfDuration.setText(movie.getDuration());

        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfPicturePath.setText(movie.getPicturePath());
            setIcon(lbIcon, new File(movie.getPicturePath()));
        }

        loadActors(movie);

    }

    private void initActorsListModel() {
        actorsModel = new DefaultListModel<>();
        lsActors.setModel(actorsModel);
    }

    private void loadActors(Movie movie) {
        actorsModel.clear();
        if (movie.getActors().get(0).getFirstName() != null) {
            movie.getActors().forEach(actorsModel::addElement);
        }
        lsActors.setModel(actorsModel);
    }

    @Override
    public boolean addPerson(Person person) throws Exception {
        if (repository.checkIfActorNameTaken(person)) {
            person.setId(repository.createActor(person));
            if (!actorsModel.contains(person)) {
                actorsModel.addElement(person);
                actorsToAddToDB.add(person);
                return true;
            }
            return false;
        } else {
            actorsModel.addElement(person);
            actorsToAddToDB.add(person);
            return true;
        }
    }

    private void initActorsSet() {
        actorsToAddToDB = new HashSet<>();
        actorsToRemoveFromDB = new HashSet<>();
    }

    private void clearActorSets() {
        actorsToAddToDB.clear();
        actorsToRemoveFromDB.clear();
    }

    private static Person getPerson(String data) {
        String[] personInfo = data.trim().split(" ", 2);
        switch (personInfo.length) {
            case 1:
                return new Person(personInfo[0], "");
            case 2:
                return new Person(personInfo[0], personInfo[1]);
        }
        throw new IllegalArgumentException("Data could not be handled");
    }

    private void clearForm() {
        validationFields.forEach(field -> field.setText(""));
        errorLabels.forEach(label -> label.setText(""));
        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(DEFAULT_PICTURE_PATH)));

        actorsModel.clear();
        lsActors.setModel(actorsModel);

        selectedMovie = null;
        selectedActor = null;
    }

    private String uploadPicture() throws IOException {
        String pictureUrl = tfPicturePath.getText().trim();
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));

        String pictureName = UUID.randomUUID() + ext;
        String picturePath = DIR + File.separator + pictureName;

        FileUtils.copy(pictureUrl, picturePath);

        return picturePath;
    }
}
